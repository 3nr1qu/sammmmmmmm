{"ast":null,"code":"import { getAllUsers, deleteUsers } from './FetchApi';\nexport const fetchData = async dispatch => {\n  dispatch({\n    type: 'loading',\n    payload: true\n  });\n  let responseData = await getAllUsers();\n  setTimeout(() => {\n    if (responseData && responseData.Users) {\n      dispatch({\n        type: 'fetchAllUsers',\n        payload: responseData.Users\n      });\n      dispatch({\n        type: 'loading',\n        payload: false\n      });\n    }\n  }, 1000);\n};\n\n/* This method call the editmodal & dispatch category context */\nexport const editOrderReq = (oId, type, status, dispatch) => {\n  if (type) {\n    console.log('click update');\n    dispatch({\n      type: 'updateOrderModalOpen',\n      oId: oId,\n      status: status\n    });\n  }\n};\nexport const deleteOrderReq = async (oId, dispatch) => {\n  let responseData = await deleteOrder(oId);\n  console.log(responseData);\n  if (responseData && responseData.success) {\n    fetchData(dispatch);\n  }\n};\n\n/* Filter All Order */\nexport const filterOrder = async (type, data, dispatch, dropdown, setDropdown) => {\n  let responseData = await getAllUsers();\n  if (responseData && responseData.Orders) {\n    let newData;\n    if (type === 'All') {\n      dispatch({\n        type: 'fetchOrderAndChangeState',\n        payload: responseData.Orders\n      });\n      setDropdown(!dropdown);\n    } else if (type === 'Not processed') {\n      newData = responseData.Orders.filter(item => item.status === 'Not processed');\n      dispatch({\n        type: 'fetchOrderAndChangeState',\n        payload: newData\n      });\n      setDropdown(!dropdown);\n    } else if (type === 'Processing') {\n      newData = responseData.Orders.filter(item => item.status === 'Processing');\n      dispatch({\n        type: 'fetchOrderAndChangeState',\n        payload: newData\n      });\n      setDropdown(!dropdown);\n    } else if (type === 'Shipped') {\n      newData = responseData.Orders.filter(item => item.status === 'Shipped');\n      dispatch({\n        type: 'fetchOrderAndChangeState',\n        payload: newData\n      });\n      setDropdown(!dropdown);\n    } else if (type === 'Delivered') {\n      newData = responseData.Orders.filter(item => item.status === 'Delivered');\n      dispatch({\n        type: 'fetchOrderAndChangeState',\n        payload: newData\n      });\n      setDropdown(!dropdown);\n    } else if (type === 'Cancelled') {\n      newData = responseData.Orders.filter(item => item.status === 'Cancelled');\n      dispatch({\n        type: 'fetchOrderAndChangeState',\n        payload: newData\n      });\n      setDropdown(!dropdown);\n    }\n  }\n};","map":{"version":3,"names":["getAllUsers","deleteUsers","fetchData","dispatch","type","payload","responseData","setTimeout","Users","editOrderReq","oId","status","console","log","deleteOrderReq","deleteOrder","success","filterOrder","data","dropdown","setDropdown","Orders","newData","filter","item"],"sources":["D:/SMCB-Project/client/src/components/admin/users/Actions.js"],"sourcesContent":["import { getAllUsers, deleteUsers } from './FetchApi';\n\nexport const fetchData = async dispatch => {\n  dispatch({ type: 'loading', payload: true });\n  let responseData = await getAllUsers();\n\n  setTimeout(() => {\n    if (responseData && responseData.Users) {\n      dispatch({\n        type: 'fetchAllUsers',\n        payload: responseData.Users\n      });\n      dispatch({ type: 'loading', payload: false });\n    }\n  }, 1000);\n};\n\n/* This method call the editmodal & dispatch category context */\nexport const editOrderReq = (oId, type, status, dispatch) => {\n  if (type) {\n    console.log('click update');\n    dispatch({ type: 'updateOrderModalOpen', oId: oId, status: status });\n  }\n};\n\nexport const deleteOrderReq = async (oId, dispatch) => {\n  let responseData = await deleteOrder(oId);\n  console.log(responseData);\n  if (responseData && responseData.success) {\n    fetchData(dispatch);\n  }\n};\n\n/* Filter All Order */\nexport const filterOrder = async (\n  type,\n  data,\n  dispatch,\n  dropdown,\n  setDropdown\n) => {\n  let responseData = await getAllUsers();\n  if (responseData && responseData.Orders) {\n    let newData;\n    if (type === 'All') {\n      dispatch({\n        type: 'fetchOrderAndChangeState',\n        payload: responseData.Orders\n      });\n      setDropdown(!dropdown);\n    } else if (type === 'Not processed') {\n      newData = responseData.Orders.filter(\n        item => item.status === 'Not processed'\n      );\n      dispatch({ type: 'fetchOrderAndChangeState', payload: newData });\n      setDropdown(!dropdown);\n    } else if (type === 'Processing') {\n      newData = responseData.Orders.filter(\n        item => item.status === 'Processing'\n      );\n      dispatch({ type: 'fetchOrderAndChangeState', payload: newData });\n      setDropdown(!dropdown);\n    } else if (type === 'Shipped') {\n      newData = responseData.Orders.filter(item => item.status === 'Shipped');\n      dispatch({ type: 'fetchOrderAndChangeState', payload: newData });\n      setDropdown(!dropdown);\n    } else if (type === 'Delivered') {\n      newData = responseData.Orders.filter(item => item.status === 'Delivered');\n      dispatch({ type: 'fetchOrderAndChangeState', payload: newData });\n      setDropdown(!dropdown);\n    } else if (type === 'Cancelled') {\n      newData = responseData.Orders.filter(item => item.status === 'Cancelled');\n      dispatch({ type: 'fetchOrderAndChangeState', payload: newData });\n      setDropdown(!dropdown);\n    }\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}